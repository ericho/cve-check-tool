extern crate libc;

use libc::c_char;
use std::ffi::{CStr, CString};

#[repr(C)]
pub struct cve_string {
    str: *mut c_char,
    len: usize,
}

// This method will be deleted in the future.
#[no_mangle]
pub extern fn cve_string_cat(s: *mut cve_string, append: *const c_char) -> bool {
    if s.is_null() || append.is_null() {
        return false;
    }

    unsafe {
        if (*s).str.is_null() {
            return false;
        }
        let _s = CStr::from_ptr((*s).str).to_string_lossy().to_owned();
        let _append = CStr::from_ptr(append).to_string_lossy().to_owned();
        let a = format!("{}{}", _s, _append);
        libc::free((*s).str as *mut libc::c_void);
        (*s).str = CString::new(a).unwrap().as_ptr() as *mut c_char;
        (*s).len = libc::strlen((*s).str);
    }
    true
}

#[cfg(test)]
mod tests {
    #[test]
    fn it_works() {
        assert_eq!(2 + 2, 4);
    }
}
